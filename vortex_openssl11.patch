diff -Naur vortex-1.1.18.b2359/tls/vortex_tls.c vortex-1.1.18.b2359_openssl11/tls/vortex_tls.c
--- vortex-1.1.18.b2359/tls/vortex_tls.c	2016-07-22 12:37:25.000000000 +0200
+++ vortex-1.1.18.b2359_openssl11/tls/vortex_tls.c	2018-04-06 02:01:09.413339846 +0200
@@ -52,6 +52,7 @@
 #include <openssl/x509v3.h>
 #include <openssl/ssl.h>
 #include <openssl/err.h>
+#include <openssl/evp.h>
 
 /* some keys to store creation handlers and its associate data */
 #define CTX_CREATION      "tls:ctx-creation"
@@ -726,8 +727,8 @@
 
 	if (ctx_creation == NULL) {
 		/* fall back into the default implementation */
-		ssl_ctx  = SSL_CTX_new (TLSv1_client_method ()); 
-		vortex_log (VORTEX_LEVEL_DEBUG, "ssl context SSL_CTX_new (TLSv1_client_method ()) returned = %p", ssl_ctx);
+		ssl_ctx  = SSL_CTX_new (TLS_client_method ()); 
+		vortex_log (VORTEX_LEVEL_DEBUG, "ssl context SSL_CTX_new (TLS_client_method ()) returned = %p", ssl_ctx);
 	} else {
 		/* call to the default handler to create the SSL_CTX */
 		ssl_ctx  = ctx_creation (connection, ctx_creation_data);
@@ -1616,7 +1617,7 @@
 	} /* end if */
 
 	if (ctx_creation == NULL) {
-		ssl_ctx  = SSL_CTX_new (TLSv1_server_method ());
+		ssl_ctx  = SSL_CTX_new (TLS_server_method ());
 	} else {
 		/* call to the default handler to create the SSL_CTX */
 		ssl_ctx  = ctx_creation (connection, ctx_creation_data);
@@ -2400,7 +2401,7 @@
 		return NULL;
 	}
 	
-	sslctx = SSL_CTX_new (TLSv1_server_method ());
+	sslctx = SSL_CTX_new (TLS_server_method ());
 	SSL_CTX_use_certificate_file (sslctx, path,  SSL_FILETYPE_PEM);
 	ssl    = SSL_new (sslctx);
 	// Note: SSL_get_certificate() is a getter method that returns a borrowed 
@@ -2469,7 +2470,7 @@
 {
 	char          * result = NULL;
 	unsigned char   buffer[EVP_MAX_MD_SIZE];
-	EVP_MD_CTX      mdctx;
+	EVP_MD_CTX      *mdctx = EVP_MD_CTX_new();
 	const EVP_MD  * md = NULL;
 #ifdef __SSL_0_97__
 	unsigned int   md_len;
@@ -2497,17 +2498,9 @@
 	/* add all digest */
 	/* OpenSSL_add_all_digests(); */
 	
-#ifdef __SSL_0_97__
-	EVP_MD_CTX_init(&mdctx);
-	EVP_DigestInit_ex(&mdctx, md, NULL);
-	EVP_DigestUpdate(&mdctx, content, content_size);
-	EVP_DigestFinal_ex(&mdctx, buffer, &md_len);
-	EVP_MD_CTX_cleanup(&mdctx);
-#else
-	EVP_DigestInit (&mdctx, md);
-	EVP_DigestUpdate (&mdctx, content, content_size);
-	EVP_DigestFinal (&mdctx, buffer, &md_len);
-#endif
+	EVP_DigestInit (mdctx, md);
+	EVP_DigestUpdate (mdctx, content, content_size);
+	EVP_DigestFinal (mdctx, buffer, &md_len);
 	
 	result = __vortex_tls_translateToOctal (md_len, buffer);
 	
